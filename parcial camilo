import re, json 

# Conjunto para almacenar IPs únicas
ips = set()

# Contadores para diferentes códigos de error
error100 = 0
error200 = 0
error300 = 0
error400 = 0
error500 = 0 

def extractFromRegularExpression(regex, data):
    """
    Función que extrae coincidencias en el texto dado un patrón regex.
    Devuelve una lista con todas las coincidencias encontradas.
    """
    if data:
        return re.findall(regex, data)
    else:
        return None 
    
# Expresión regular para extraer datos del log
regex = (r"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s-\s-\s\[(\d{2}/\b[a-zA-Z]{3}\b/\d{4}):(\d{2}:\d{2}:\d{2})\s\+\d{4,6}\]\s\"(\b[A-Z]{3,7}\b)\s(/\S+)\sHTTP/\d\.\d\"\s(\d{3})")

# Abre el archivo de logs en modo lectura
with open(r"C:\Users\USUARIO\Desktop\Camilo\access.log", "r") as file:
    data = file.read()  # Lee todo el contenido del archivo
    resultado = extractFromRegularExpression(regex, data)  # Extrae datos usando regex
    
    # Procesa cada coincidencia encontrada en el log
    for ip, fecha, hora, metodo, ruta, error in resultado:
        ips.add(ip)  # Almacena la IP en el conjunto para evitar duplicados
        
        # Contabiliza los diferentes códigos de error
        if error == "100":
            error100 += 1
        elif error == "200":
            error200 += 1 
        elif error == "300":
            error300 += 1 
        elif error == "400":
            error400 += 1 
        elif error == "500":
            error500 += 1 

# Imprime las IPs únicas encontradas en el log
print("\nIPs únicas encontradas:")
for ip in sorted(ips):
    print(ip)

# Imprime el conteo de errores HTTP
print("\nConteo de errores:")
print(f"Error 100: {error100}")
print(f"Error 200: {error200}")
print(f"Error 300: {error300}")
print(f"Error 400: {error400}")
print(f"Error 500: {error500}")
